{"version":3,"sources":["_src/gameOfLife.js","_src/library.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","runIteration","world","getCoordOfAliveCells","validateInput","validateOutput","module","exports","nextGeneration","currGeneration","bounds","result","heightOfWorld","bottomRight","topLeft","lengthOfWorld","generateDeadCells","length","Array","fill","generateGrid","height","board","count","push","getNeighboursByIndex","inputArray","index","neighbours","filter","x","undefined","getVerticalNeighbours","arrayIndex","subArrayIndex","topNeighbours","bottomNeighbours","getAllNeighbours","toString","split","map","sort","countAliveNeighboursOfCell","isAlive","aliveNeighbours","currentState","toggleState","slice","filterValidGeneration","isValid","elem","this","checkValidHeight","bind","checkValidWidth","subArray","repeat","symbol","join","getHorizontalNeighbours","elemOfArray","totalAlive","state","resurrectCells","subIndex","bound","aliveCellsCoordinate","_this3","number","_this4","_this","_this2","Cell","react_default","a","createElement","width","props","color","col","y","row","stroke","strokeWidth","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gen","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","forEach","cell","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b72110fb.chunk.js","sourcesContent":["const { runIteration,\n  world,\n  getCoordOfAliveCells,\n  validateInput,\n  validateOutput\n} = require('./library.js');\n\nconst nextGeneration = function(currGeneration, bounds) {\n    let result = [];\n    let heightOfWorld = (bounds.bottomRight[1] - bounds.topLeft[1] + 1);\n    let lengthOfWorld = (bounds.bottomRight[0] - bounds.topLeft[0] + 1);\n    result = world(lengthOfWorld,heightOfWorld,validateInput(bounds,currGeneration));\n    result = runIteration(result);\n    return validateOutput(bounds,getCoordOfAliveCells(result));\n};\n\nmodule.exports = { nextGeneration };\n","const repeat = function(symbol, length) {\n  return new Array(length).fill(symbol).join('');\n};\n\nconst generateDeadCells = function(length) {\n  return new Array(length).fill(0);\n};\n\nconst generateGrid = function(height,length) {\n  let board = [];\n  for (let count = 0; count < height; count++) {\n    board.push(generateDeadCells(length));\n  }\n  return board;\n};\n\n\nconst getNeighboursByIndex = function(inputArray, index) {\n  let neighbours = [];\n  if (index < 0) { return neighbours; }\n  neighbours.push(inputArray[index - 1]);\n  neighbours.push(inputArray[index + 1]);\n  return neighbours.filter((x) => x!==undefined);\n};\n\nconst getHorizontalNeighbours = function(inputArray, arrayIndex, subArrayIndex) {\n  return getNeighboursByIndex(inputArray[arrayIndex], subArrayIndex);\n};\n\nconst getVerticalNeighbours = function(inputArray, arrayIndex, subArrayIndex) {\n  let neighbours = [];\n  let topNeighbours = inputArray[arrayIndex - 1];\n  let bottomNeighbours = inputArray[arrayIndex + 1];\n\n  if (inputArray[1] === undefined) { return neighbours; }\n  if (topNeighbours !== undefined) {\n    neighbours.push(topNeighbours[subArrayIndex]);\n  }\n\n  if (bottomNeighbours !== undefined) {\n    neighbours.push(bottomNeighbours[subArrayIndex]);\n  }\n\n  return neighbours;\n};\n\nconst getAllNeighbours = function(inputArray, arrayIndex, subArrayIndex) {\n  let neighbours = [];\n  if (arrayIndex < 0 || subArrayIndex < 0 || inputArray.length < 2) {\n    return neighbours;\n  }\n\n  // horizontal neighbours\n  neighbours.push(getNeighboursByIndex(inputArray[arrayIndex], subArrayIndex)); \n\n  // top diagonal neighbours\n  if (inputArray[arrayIndex - 1] !== undefined) {\n    neighbours.push(getNeighboursByIndex(inputArray[arrayIndex - 1], subArrayIndex)); \n  }\n\n  // bottom diagonal neighbours\n  if (inputArray[arrayIndex + 1] !== undefined) {\n    neighbours.push(getNeighboursByIndex(inputArray[arrayIndex + 1], subArrayIndex)); \n  }\n\n  //vertical neighbours\n  neighbours.push(getVerticalNeighbours(inputArray, arrayIndex, subArrayIndex));\n  return neighbours.toString().split(',').map(x=>+x).sort();\n};\n\nconst countAliveNeighboursOfCell = function(inputArray, arrayIndex, subArrayIndex){\n  return getAllNeighbours(inputArray, arrayIndex, subArrayIndex).filter(x=> x).length;\n};\n\nconst isAlive = function(aliveNeighbours, currentState) {\n  if(aliveNeighbours < 2 || aliveNeighbours > 3) { return 0; }\n  if(aliveNeighbours === 3) { return 1; }\n  return currentState;\n};\n\nconst runIteration = function(inputArray) {\n  let result = inputArray.map(x=>x.slice());\n\n  inputArray.map( (elemOfArray, count)=>{\n    inputArray[count].map( (elem, index)=>{\n\n      let totalAlive = countAliveNeighboursOfCell(inputArray, count, index);\n      let state =  isAlive(totalAlive, inputArray[count][index]);\n      result[count][index] = state;\n\n    });\n  });\n\n  return result;\n};\n\n\nconst toggleState = function(inputArray, arrayIndex, subArrayIndex) {\n  let result = inputArray.slice();\n  let currentState = result[arrayIndex][subArrayIndex];\n  currentState = 1 - currentState;\n  result[arrayIndex][subArrayIndex] = currentState;\n  return result;\n};\n\nconst world = function(height,length,resurrectCells) {\n  let result = generateGrid(height,length); \n  let arrayIndex = resurrectCells.map(x=>x[0]);\n  let subIndex = resurrectCells.map(x=>x[1]); \n  for(let count=0; count<arrayIndex.length; count++) {\n    result = toggleState(result,arrayIndex[count],subIndex[count]);\n  }\n  return result;\n};\n\nconst getCoordOfAliveCells = function(world) {\n  let result = [];\n  for(let count=0; count<world.length; count++) {\n    for(let index=0; index<world[count].length; index++) {\n      if(world[count][index] === 1) { result.push([count,index]); }\n    }\n  }\n  return result;\n};\nconst validateOutput = function(bound,aliveCellsCoordinate) {\n  let result = aliveCellsCoordinate.map( x=>x.slice() );\n\n  result = result.map( function(x){\n      return x.map( (number,index)=>(index === 0) ? number + this : number )\n      }, bound.topLeft[0]  ) \n\n  result =  result.map( function(x){\n      return x.map( (number,index)=>(index === 1) ? number + this : number )\n      }, bound.topLeft[1]  ) \n\n  return result;\n}\n\n\nconst validateInput = function(bound,aliveCellsCoordinate) {\n  let result = filterValidGeneration(bound,aliveCellsCoordinate);\n  result = result.map( x=>x.slice() );\n\n  result = result.map( function(x){\n    return x.map( (number,index)=>(index === 0) ? number - this : number )\n  }, bound.topLeft[0]  ) \n\n  result =  result.map( function(x){\n    return x.map( (number,index)=>(index === 1) ? number - this : number )\n  }, bound.topLeft[1]  ) \n\n  return result;\n}\n\nconst filterValidGeneration = function(bounds,currGeneration){\n\n  const isValid = function(elem){\n    return elem >= bounds.topLeft[this] && elem <= bounds.bottomRight[this];\n  }\n\n  const checkValidHeight = isValid.bind(0);\n  const checkValidWidth = isValid.bind(1);\n\n  const checkValidDimensions =  function(subArray){\n    return checkValidHeight(subArray[0]) && checkValidWidth(subArray[1]);\n  }\n\n  return currGeneration.filter( checkValidDimensions );\n};\n\n\n/* ------- EXPORTS ------- */\n\nmodule.exports = {\n  repeat,\n  generateDeadCells,\n  generateGrid,  // \n  getNeighboursByIndex,\n  getHorizontalNeighbours,\n  getVerticalNeighbours,\n  getAllNeighbours,\n  countAliveNeighboursOfCell,\n  isAlive,\n  toggleState,\n  runIteration,\n  world,\n  getCoordOfAliveCells,\n  validateInput,\n  validateOutput\n};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}